/**
* Search Bar Style
 * 디자인 시스템에 맞게 코드 이동, 파일생성 해주세요.
 **/

// .searchbar {
// 	position: relative;
// 	width: 100%;
// 	height: 2.5em;
// 	display: flex;
// 	justify-content: space-between;
// 	align-items: center;
// 	border: 1px solid var(--brand-bl-50);
// 	border-radius: 12px;
// 	padding: 0.75rem 1rem;
// 	background-color: var(--brand-bl-50);

// 	&:hover {
// 		border-color: #78727f;
// 	}

// 	div:first-child {
// 		padding-right: 0.875rem;
// 	}

// 	input {
// 		width: 100%;
// 		background-color: var(--brand-bl-50);
// 		border: 1px solid transparent;
// 		font-weight: 400;
// 		line-height: 24px;
// 		letter-spacing: -0.006em;
// 		color: var(--light-text-04);

// 		&::placeholder {
// 			color: var(--light-text-04);
// 		}

// 		&:focus-visible {
// 			border: none;
// 			outline: none;
// 		}
// 	}

// 	.clear {
// 		padding-left: 14px;

// 		button {
// 			margin: 0;
// 			background-color: rgba(0, 0, 0, 0);
// 			border: none;
// 		}
// 	}
// 	.search-btn {
// 		display: flex;
// 		flex-direction: row;
// 		justify-content: center;
// 		align-items: center;
// 		padding: 2px;

// 		width: 24px;
// 		height: 24px;

// 		/* ch-IN/BL-900 */

// 		background: #3366ff;
// 		border-radius: 4px;
// 	}
// }

// .searchbar-focus {
// 	border-color: #78727f;
// }

/*******************************************************************************************
 * Input Style by pts
 * 디자인 시스템에 맞게 코드 이동, 파일생성 해주세요.
 **/

/*******************************************************************
 * Single Input 재 정의.
 * input에 직접 클래스를 부여했을 때와
 * input을 감싼 div에 클래스를 부여했을 때 상황이 다른 점을 감안해서
 * input.cic-input-default 와 div.cic-input-default 로 분리.
 *
 * mixin의 프로퍼티는 div가 read-only로 인식되는 점이 있어서
 * 오버라이딩 없이 유동적으로 변경할 수 있도록 변경함.
 *******************************************************************/

/**
   * input에 디폴트로 적용되는 @mixin
	 * 클래스명은 input이지만 input을 감싸고 있는 div에 주는 클래스임!!
   */

@mixin cic-input-default {
	display: flex;
	align-items: center;
	justify-content: space-between;
	width: 100%;
	border: 1px solid transparent;
	border-radius: 1rem;
	padding: 0.75rem 1rem;
	background-color: var(--brand-bl-50);
	font-weight: 400;
	line-height: 1.5rem;
	letter-spacing: -0.006em;

	&:hover {
		border-color: var(--gray-scale-10);
	}

	// 자식요소가 focus 되면 해당 클래스를 가진 부모요소는 아래와 같은 속성이 적용 됨.
	&:focus-within {
		border-color: var(--gray-scale-10);
		background-color: #ffffff;
	}

	input {
		margin: 0;
		padding: 0;
		width: 100%;
		border: transparent;
		border-radius: 0;
		text-align: left;
		background-color: transparent;
		color: var(--light-text-02);

		&::placeholder {
			color: var(--gray-scale-08);
		}

		&:focus-visible {
			border: none;
			outline: none;
		}
	}

	input[type='number']::-webkit-outer-spin-button,
	input[type='number']::-webkit-inner-spin-button {
		-webkit-appearance: none;
		margin: 0;
	}
}

.cic-input-default {
	@include cic-input-default;
}

.cic-input-focus {
	@include cic-input-default;
	border-color: var(--gray-scale-10);
}

.cic-input-read-only {
	@include cic-input-default;
	background-color: var(--gray-scale-05);
	&:hover {
		border-color: transparent;
	}
	&:focus-within {
		border-color: transparent;
		background-color: var(--gray-scale-05);
	}
}

/**
   * 성공(success) 클래스(class)
	 * input을 감싸는 div에 success에 해당하는 기본적인 스타일링을 지정함.
   */

@mixin cic-input-success {
	@include cic-input-default;
	border-color: var(--suc-main);
	background-color: var(--suc-bg);
	color: var(--suc-main);
	&:hover {
		border-color: var(--suc-main);
	}
	// 자식요소가 focus 되면 해당 클래스를 가진 부모요소는 아래와 같은 속성이 적용 됨.
	&:focus-within {
		border-color: inherit;
	}

	input {
		color: inherit;
		&::placeholder {
			color: inherit;
		}
	}
}

.cic-input-success {
	@include cic-input-success;
}

div.cic-input-success {
	&:hover {
		background-color: var(--suc-bg);
	}
	// 자식요소가 focus 되면 해당 클래스를 가진 부모요소는 아래와 같은 속성이 적용 됨.
	&:focus-within {
		background-color: var(--suc-bg);
	}
}

/**
   * 에러,실패(error) 클래스(class)
	 * input을 감싸는 div에 error에 해당하는 기본적인 스타일링을 지정함.
   */

@mixin cic-input-error {
	@include cic-input-default;
	border-color: var(--danger-main);
	background-color: var(--danger-bg);
	color: var(--danger-main);
	&:hover {
		border-color: var(--danger-main);
	}
	// 자식요소가 focus 되면 해당 클래스를 가진 부모요소는 아래와 같은 속성이 적용 됨.
	&:focus-within {
		border-color: inherit;
	}

	input {
		color: inherit;
		&::placeholder {
			color: inherit;
		}
	}
}

.cic-input-error {
	@include cic-input-error;
}

div.cic-input-error {
	&:hover {
		background-color: var(--danger-bg);
	}
	// 자식요소가 focus 되면 해당 클래스를 가진 부모요소는 아래와 같은 속성이 적용 됨.
	&:focus-within {
		background-color: var(--danger-bg);
	}
}

/**
   * 에러 상태 @mixin cic-input-default @include 해오면서 조잡해진게 많아짐.
	 * 변수 선언 부분을 다시 조정 해 볼 필요가 있을 듯 함.
   */

// @include cic-input-default(1px solid var(--danger-main), var(--danger-bg), 1px solid var(--danger-main));

/**
   * 성공 상태 @mixin cic-input-default @include 해오면서 조잡해진게 많아짐.
	 * 변수 선언 부분을 다시 조정 해 볼 필요가 있을 듯 함.
   */

// .cic-input-error {
// 	border: 1px solid var(--danger-main);
// 	background-color: var(--danger-bg);
// 	color: var(--danger-main);
// 	input {
// 		color: var(--danger-main);
// 	}
// }

// .cic-input-error-focus {
// 	border: 1px solid var(--gray-scale-02); //$gray-500 !important; //grat_500
// 	background-color: var(--danger-bg);
// }

/**
		 * 성공 상태
		 */

// .cic-input-success {
// 	border: 1px solid var(--suc-main);
// 	background-color: var(--suc-bg);
// 	color: var(--suc-main);

// 	input {
// 		color: var(--suc-main);
// 	}
// }

// .cic-input-success-focus {
// 	border: 1px solid var(--gray-scale-02); //$gray-500 !important; //grat_500
// 	background-color: var(--suc-bg);
// }

/*******************************************************************
 * Input + Select 재 정의.
 *******************************************************************/
